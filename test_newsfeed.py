import unittest
import newsfeed
import feedparser


class TestNewsFeed(unittest.TestCase):

    def test_removehtml(self):
        self.assertEqual('bla', newsfeed.removehtml('<p>bla'))
        self.assertEqual('bla', newsfeed.removehtml('<p>bla</p>'))
        self.assertEqual('>bla<', newsfeed.removehtml('<p>>bla<</p>'))

    def test_topdomain(self):
        # Strips all before the last period.
        self.assertEqual('rolfje.com', newsfeed.topdomain('www.rolfje.com'))
        self.assertEqual('rolfje.com', newsfeed.topdomain('feeds.www.rolfje.com'))
        self.assertEqual('rolfje.com/', newsfeed.topdomain('https://feeds.www.rolfje.com/'))
        self.assertEqual('com/temp.rss', newsfeed.topdomain('https://feeds.www.rolfje.com/temp.rss'))

    def createentry(self, id, title, summary):
        e = feedparser.FeedParserDict()
        e['id'] = id
        e['title'] = title
        e['summary'] = summary
        print e
        return e

    def test_filterrssentries(self):
        entries = feedparser.parse(
            """<?xml version="1.0" encoding="UTF-8"?>
            <rss version="2.0">
                <channel>
                    <item>
                        <title>Brilliant Title</title>
                        <link>https://link-to-article.com/article1</link>

                        <guid isPermaLink="false">https://link-to-article.com/article1</guid>
                        <description><![CDATA[I can include cheeseburger.]]]></description>
                    </item>
                    <item>
                        <title>Dumb Title</title>
                        <link>https://link-to-article.com/article2</link>

                        <guid isPermaLink="false">https://link-to-article.com/article1</guid>
                        <description><![CDATA[I think this needs to be excluded.]]]></description>
                    </item>
                </channel>
            </rss>"""
        ).entries

        filtered = newsfeed.filterrssentries(entries, None, None)
        self.assertEqual(2, len(filtered), msg="Should not filter anything.")

        filtered = newsfeed.filterrssentries(entries, ['Brilliant'], None)
        self.assertEqual(1, len(filtered), msg="Include on title filter failed.")
        self.assertEqual("Brilliant Title", filtered[0].title)

        filtered = newsfeed.filterrssentries(entries, ['include'], None)
        self.assertEqual(1, len(filtered), msg="Include on summary filter failed.")
        self.assertEqual("Brilliant Title", filtered[0].title)

        filtered = newsfeed.filterrssentries(entries, None, ['dUmB'])
        self.assertEqual(1, len(filtered), msg="Exclude on title filter failed.")
        self.assertEqual("Brilliant Title", filtered[0].title)

        filtered = newsfeed.filterrssentries(entries, None, ['exclude'])
        self.assertEqual(1, len(filtered), msg="Exclude on partial word in summary filter failed.")
        self.assertEqual("Brilliant Title", filtered[0].title)

        filtered = newsfeed.filterrssentries(entries, ['excluded'], ['excluded'])
        self.assertEqual(0, len(filtered), msg="Exclude should always exclude, even if in included filter.")

    def test_parsetwitrss(self):
        entries = feedparser.parse(
            """<?xml version="1.0" encoding="UTF-8"?>
            <rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:georss="http://www.georss.org/georss" xmlns:twitter="http://api.twitter.com" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
            <channel>
                <atom:link href="http://twitrss.me/twitter_user_to_rss/?user=OmroepFlevoland" rel="self" type="application/rss+xml" /> 
                <title>Twitter Search / OmroepFlevoland </title>
                <link>https://twitter.com/OmroepFlevoland</link>
                <description>Twitter feed for: OmroepFlevoland. Generated by TwitRSS.me</description>
                <language>en-us</language>
                <ttl>40</ttl>
                <image>
                    <url>https://pbs.twimg.com/profile_images/875457140357464069/8veKp4fo_400x400.jpg</url>
                </image>
                <item>
                <title>Bekijk hier de uitgebreide samenvatting FC Eindhoven - Almere City FC  https://bit.ly/2NBgCvy&#xA0;  en de reacties van trainer @michele_santoni aanvoerder Tim Receveur en Niek Vossebelt</title>
                <dc:creator> (@OmroepFlevoland)</dc:creator>
                <description><![CDATA[<p class="TweetTextSize TweetTextSize--normal js-tweet-text tweet-text"  lang="nl">Bekijk hier de uitgebreide samenvatting FC Eindhoven - Almere City FC   <a href="https://bit.ly/2NBgCvy">https://bit.ly/2NBgCvy&nbsp;</a>  en de reacties van trainer  <a class="twitter-atreply pretty-link js-nav"  dir="ltr" href="https://twitter.com/michele_santoni">@<b>michele_santoni</b></a> aanvoerder Tim Receveur en Niek Vossebelt</p>]]></description>
                <pubDate>Sat, 01 Sep 2018 12:21:08 +0100</pubDate>
                <guid>https://twitter.com/OmroepFlevoland/status/1035850035844579329</guid>
                <link>https://twitter.com/OmroepFlevoland/status/1035850035844579329</link>
                <twitter:source/>
                <twitter:place/>
                </item>
            </channel>
            </rss>"""
        ).entries

        self.assertEqual(1, len(entries), msg="Did not parse twitrss entry.")

        # Test rendering the payload
        entry = entries[0]
        payload = newsfeed.buildmattermostpayload('myusername', entry)
        self.assertEqual(
            '[tweet:](https://twitter.com/OmroepFlevoland/status/1035850035844579329) Bekijk hier de uitgebreide samenvatting FC Eindhoven - Almere City FC  https://bit.ly/2NBgCvy\xc2\xa0  en de reacties van trainer @michele_santoni aanvoerder Tim Receveur en Niek Vossebelt',
            payload['text'])

    def test_split(self):
        s = 'hello world'
        self.assertEqual(s.split(), ['hello', 'world'])
        # check that s.split fails when the separator is not a string
        with self.assertRaises(TypeError):
            s.split(2)

    def testidfile(self):
        f = newsfeed.idfilefromurl('https://twitrss.me/twitter_user_to_rss/?user=omroepflevoland')
        self.assertTrue( f.endswith('/twitrss.me.omroepflevoland.ids'))

        f = newsfeed.idfilefromurl('https://somefeed.bla.example/somelocation/file/rr.rr')
        self.assertTrue( f.endswith('/somefeed.bla.example.ids'))

if __name__ == '__main__':
    unittest.main()
